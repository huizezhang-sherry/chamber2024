---
title: "Switching between space and time: Spatio-temporal analysis with cubble"
date: "2024 Aug 05"
institute: "University of Texas at Austin" 
author: "H. Sherry Zhang" 
format: 
  revealjs:
    scrollable: true
    slide-number: true
    show-slide-number: all
    aspectratio: 169
    theme: [default]
    preview-links: auto
    multiplex: true
    pdf-separate-fragments: true
    css: style.css
editor_options: 
  chunk_output_type: console
# include-in-header:
#   - text: |
editor: 
  markdown: 
    wrap: 72
---

<!-- -   https://twitter.com/huizezhangsh -->
<!-- -   @huizezhangsh@fosstodon.org  -->
<!-- -   https://github.com/huizezhang-sherry/ -->
<!-- -   https://huizezhangsh.netlify.app/ -->

```{r setup}
#| include: false  
library(knitr)
options(htmltools.dir.version = FALSE)
opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, 
               error = FALSE, fig.align = "center")
#wide_width <-  100
options(pillar.print_max = 5, 
        pillar.print_min = 5
        #width = wide_width
        )
#remotes::install_github('coolbutuseless/ggsvg')
#devtools::install_github("r-for-educators/flair")
library(tidyverse)
library(sf)
library(ggsvg)
library(ozmaps)
library(cubble)
library(patchwork)
library(tsibble)
library(flair)
library(stars)
```

```{css, echo=FALSE}
.form-allowed-tags {
  display: none;
}
```


Spatio-temporal data can mean different things and today we
will talk about vector data.

```{r}
set.seed(123)
aus_stations <- cubble::climate_aus |> sample_n(size = 50)
oz_simp <- ozmaps::abs_ste %>% 
  filter(NAME != "Other Territories") |> 
  rmapshaper::ms_simplify(keep = 0.05) 
vector <- ggplot() +
  geom_sf(data = oz_simp, fill = "grey95", color = "white") +
  geom_point(data = aus_stations, aes(long,lat)) + 
  ggthemes::theme_map() + 
  ggtitle("vector: Australia weather station locations")
tif = system.file("tif/L7_ETMs.tif", package = "stars")
x = read_stars(tif)
x <- x[,,,1:3] |> st_rgb()  # x contains colors as pixel values
raster <- ggplot() + 
  geom_stars(data = x) + 
  theme_void() + 
  ggtitle("satellite image: Landsat 7 ETM") 
trajectory <- dplyr::storms %>% 
  filter(status == "hurricane") %>% 
  ggplot(aes(x = long, y = lat, group = interaction(name, year))) + 
  geom_path(size = 0.5) + 
  theme_bw() + 
  ggtitle("trajectory: Atlantic hurricane paths") 
```

```{r}
vector | raster | trajectory
```

::: notes
Here we have three different types: vector, raster, trajectory data
(explain each)

vector data have time series measured at a collection of locations

raster data use gridded cells to represent a continuous space and each
cell, or pixel, has variables measured at different time points. An
example of raster data could be satellite images.

There is also trajectory data where points are moving in the space and
time in the same time. This type of data can be found in ecology to
track animal movements.

In my talk today, we will focus on vector data.
:::

## 

Sometimes you want to bury your head on the spatial side of the data,
and sometimes you want to focus on the temporal side.

Cubble is a nested object built on tibble that allow easy pivoting
between spatial and temporal form.

## 

```{r}
#| out-width: 100%
knitr::include_graphics(here::here("figures/cubble-operations.png"))
```

::: notes
-   Today I will introduce a new data structure, called cubble, for
    vector spatio-temporal data

-   in short, cubble is a nested object built on tibble that allow easy
    pivoting between spatial and temporal form.

-   we will first talk about how the two forms look like and then how
    you cna pivot beween them for different tasks.

-   In the nested form, spatial variables are in columns out and
    temporal variables are nested into a list column called `ts`

-   In the long form, the time series data are shown in columns and each
    row is cross identified by the site and date in a long table

<!-- ## [Cubble: a spatio-temporal vector data structure]{.r-fit-text} -->

-   The pair `face_temporal()` and `face_spatial()` to switch the cubble
    between the two forms.

-   With `face_temporal()`, the focus of the data is now on the temporal
    face of the spatio-temporal cube and this corresponds to switch the
    data to the long form.

-   With `face_spatial()`, the long cubble is switched back to the
    nested form, the spatial face of the datacube.
:::

## Australian weather station data {.smaller}

```{r echo = FALSE}
stations <- cubble::climate_aus |> 
  rowwise() %>% 
  filter(nrow(ts) == 366, id != "ASN00014517") %>% 
  as_tibble() %>% 
  filter(row_number() %% 7 == 1) %>% 
  select(-ts) |> 
  sf::st_as_sf(coords = c("long", "lat"), crs = "EPSG:4326") 

temperature <- cubble::climate_aus  %>% 
  face_temporal() %>% 
  as_tibble() %>% 
  filter(id %in% stations$id) |> 
  as_tsibble(index = date, key = id)
```

::: columns
::: {.column width="60%"}
```{r}
#| echo: true
stations
```

```{r data-stations}
#| echo: false
#| eval: true
ggplot() +
  geom_sf(data = oz_simp, fill = "grey95", color = "white") +
  geom_sf(data = stations) + 
  ggthemes::theme_map()
```
:::

::: {.column width="40%"}
```{r}
#| echo: true
temperature
```

```{r data-ts}
temperature %>% 
  ggplot() +
  geom_line(aes(x = date, y = tmax, group = id), alpha = 0.4) + 
  theme_bw()
```
:::
:::

::: notes
-   Let's put these in a data context.

-   The `stations` data records 30 Australia weather stations, along
    with their longitude, latitude, elevation, and name

\[breath\]

-   On the temporal side, we have precipitation, maximum and minimum
    temperature collected daily for each station in 2020.
:::

## Create a cubble 

```{r echo = TRUE}
(weather <- make_cubble(spatial = stations, temporal = temperature))
```

:::{.smaller}
Read from the header: 

1) the spatial cubble is an `sf` object, 2) bbox and CRS, 3) available temporal variables and their types

:::

::: notes
-   To cast the two separate tables into a cubble, you can supply them
    in a named list.

-   You also need to tell cubble some identifiers it looks for

-   The `key` argument is the spatial identifier that connects the two
    tables.

-   The `index` argument is the temporal identifier that prescribes the
    timestamp.

-   The `coords` argument is to used to specify the coordinate

\[breath\]

-   From the cubble header, you can read that the key is `id`, there are
    30 stations and it is in the nested form.

-   The third line here shows you the available temporal variables and
    their types.

-   Also, if the spatial and temporal data is an sf or tsibble object,
    they will be indicated in the header as well.
:::

## Spatial cubble

```{r echo = TRUE}
class(weather)
```

Change the map projection: 

```{r echo = TRUE}
weather |> sf::st_transform(crs = "EPSG:3857")
```


## Temporal cubble {.smaller}

```{r face-temporal, echo = TRUE}
(weather_long <- weather |> face_temporal())
class(weather_long)
weather_long |> has_gaps()
```

::: notes
-   Here is what a cubble look like when being switched between the long
    and the nested form.

  -   With the `weather` object we just created, we turn it into the
        long form with the function `face_temporal()`

-   Notice that the third line in the header now changes to see the
    available spatial variables

:::

## Functionalities implemented 

![](figures/cubble-functions.png)

## Glyph map {.smaller .center background-image="figures/glyph-bg.png" background-size="60%" background-position="right"}

- `geom_glyph`
- `geom_glyph_box`
- `geom_glyph_line`

## [Background: what are glyph maps and why do you need one?]{.r-fit-text}

```{r}
#| fig.width: 15
#| fig.height: 7

library(GGally)
out <- GGally::nasa %>% 
  group_split(long, lat) %>% 
  map_dfr(~lm(surftemp ~ year + factor(month), data = .x) %>% broom::augment(.x)) %>% 
  mutate(diff = surftemp - .fitted)
  
library(sf)
nasa_bbox <- out %>% st_as_sf(coords = c("long", "lat")) %>% st_bbox()
coastline <- rnaturalearth::ne_coastline(returnclass = "sf") %>% st_crop(nasa_bbox)
facet_plot <- out %>% 
  ggplot() +
  geom_tile(aes(x = long, y = lat, fill = diff)) + 
  geom_sf(data = coastline, color = "grey") + 
  scale_fill_gradient2(midpoint = 0, mid = "white", high = "red", 
                       low = "blue", name = "De-seasonalized \n temperature") + 
  scale_y_continuous(breaks = c(-20, 0, 20, 40)) + 
  scale_x_continuous(breaks = c(-110, -70)) +
  facet_grid(year ~ factor(month.abb[month],levels=month.abb)) + 
  coord_sf()

map_data <- rnaturalearth::ne_countries(returnclass = "sf") %>%
  filter(continent %in% c("North America", "South America")) %>%
  st_set_crs(st_crs(nasa)) %>% 
  st_crop(nasa_bbox)

glyph_plot <- out %>%
  ggplot() + 
  geom_sf(data = map_data, color = "grey", fill = "grey") + 
  geom_glyph(aes(x_major = long, y_major = lat, 
                 x_minor = time, y_minor = diff), width = 2, height = 2) + 
  coord_sf()
  
facet_plot
```

::: footer
Modified from *Glyph-maps for Visually Exploring Temporal Patterns in
Climate Data and Models* (Wickham, 2012)
:::

::: notes
Here is a typical plot you may have seen when someone tries to visualise
their spatio-temporal data. The x and y axes are the coordinates, here I
simplify it with only two points, but in reality you may see a
collection of points in space or a raster image. Each facet here shows
the space in different timestamp and the values are mapped into color.

The problem of this type of visualisation is that it becomes difficult
to comprehend the temporal structure of the data since you have to
compare points at the same location across panels to digest the pattern.
:::

::: notes
Instead the temporal pattern is much easier to observe if shown in a
time series plot.

What a glyph map do is to put the time series glyph in the place of the
location, so you can see the temporal trend in the space.
:::

```{r eval = FALSE}
#| fig.height: 3
out %>% filter(time %in% c(1, 2, 3)) %>%
  ggplot() +
  geom_tile(aes(x = long, y = lat, fill = diff)) + 
  geom_sf(data = coastline, color = "grey") + 
  scale_fill_gradient2(midpoint=0, mid="white", high="red", low="blue", name = "temp. resid.") + 
  scale_y_continuous(breaks = c(-20, 0, 20, 40)) + 
  scale_x_continuous(breaks = c(-110, -70)) +
  facet_grid(year ~ month) + 
  coord_sf() + 
  ggtitle("De-seasonalized temperature")

out |> filter(x == 12, y == 12) |>
  ggplot() +
  geom_line(aes(x = date, y = diff)) +
  theme_bw() + 
  ylab("temp. resid.") + 
  theme(axis.title = element_text(size = 20),
        axis.text = element_text(size = 20))

```

## [Background: what are glyph maps and why do you need one?]{.r-fit-text}

![](figures/glyph1.png)


## [Background: what are glyph maps and why do you need one?]{.r-fit-text}

![](figures/glyph2.png)


## [Background: what are glyph maps and why do you need one?]{.r-fit-text}

```{r}
#| fig.width: 15
#| fig.height: 7
facet_plot
```


## Glyph map: linear transformation

```{r}
knitr::include_graphics(here::here("figures/glyph-steps.png"))
```

```{r eval = FALSE, echo = TRUE}
DATA %>%
  ggplot() +
  geom_glyph(
    aes(x_major = X_MAJOR, x_minor = X_MINOR,
        y_major = Y_MAJOR, y_minor = Y_MINOR)) +
  ...
```

::: footer
<https://huizezhang-sherry.github.io/cubble/articles/glyph.html>
:::

::: notes
-   I have a short illustration to show you how the transformation works

-   Here (1) shows a single station on the map with its long and lat
    coordinate and (2) is its associated time series.

-   Here you know the range of your x and y axis and you can use linear
    algebra to transform them into a different scale.

-   In step (3), the time series in still the same but its scale has
    been transformed to a width of 1 and heights of 0.3 and the center
    in this scale is where the original point lays.

-   Once we have the time series in the transformed axes, they can be
    placed onto the map as in (4)

-   To make a glyph map, you can use the `geom_glyph` function from the
    cubble package.

-   It requires a pair of major and a pair of minor variable as required
    aesthetics

-   The major variable are the spatial coordinates, long and lat here
    and the minor variable are the temporal coordinates, date and tmax
    here.
:::

## [Example: averaged max temperature by month in Australia]{.r-fit-text}

```{r echo = TRUE}
cb <- make_cubble(spatial = stations, temporal = temperature)

(cb_glyph <- cb %>%
  face_temporal() %>%
  tsibble::index_by(month = lubridate::month(date)) |> 
  summarise(tmax = mean(tmax, na.rm = TRUE)) %>%
  unfold(long, lat))
```

## [Example: averaged max temperature by month in Australia]{.r-fit-text}

::::columns

::: {.column width="40%"}

```{r}
#| fig-width: 4
#| fig-height: 6
cb_tbl <- cb_glyph |> as_tibble()
group1_id <- cb_tbl |> filter(lat > -15) |> pull(id) |> unique()
group2_id <- cb_tbl |> filter(month == 6, tmax > 27) |> pull(id)
group3_id <- cb_tbl |> filter(month == 1, tmax > 35) |> pull(id)
group3_id <- group3_id[!(group3_id %in% group2_id)]
group4_id <- cb_tbl |> filter(lat < -42) |> pull(id) |> unique()

cb_grp <- cb_glyph |> 
  as_tibble() |>
  mutate(group = case_when(
    id %in% group1_id ~ "Far north",
    id %in% group2_id ~ "North",
    id %in% group3_id ~ "In land",
    id %in% group4_id  ~ "Tasmania",
    TRUE ~ NA_character_
  ),
  group = factor(group, levels = c("Far north", "North", "In land", "Tasmania")))

cb_grp |>
  filter(!is.na(group)) |> 
  ggplot(aes(x = month, y = tmax, group = id)) +
  geom_line(data = cb_grp |> select(-group) , color = "grey80") + 
  geom_line(data = cb_grp |> filter(!is.na(group)), aes(color = group)) + 
  scale_x_continuous(breaks = 1:12, labels = month.abb) + 
  scale_color_brewer(palette = "Dark2") +
  facet_wrap(vars(group), ncol = 1) + 
  theme_bw() + 
  theme(panel.grid = element_blank(), legend.position = "bottom")
```

:::

:::{.column width="60%"}

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 8
cb_grp %>% 
  ggplot(aes(x_major = long, x_minor = month,
             y_major = lat, y_minor = tmax, group = id, color = group)) +
  geom_sf(data = oz_simp, fill = "grey90",
          color = "white", inherit.aes = FALSE) +
  geom_glyph_box(width = 1.5, height = 0.8) + 
  geom_glyph(aes(color = group), width = 1.5, height = 0.8) + 
  scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "grey70")) +
  ggthemes::theme_map()
```

:::
::::


## Extensions to line glyphs {.smaller}

*From Google Summer of Code this year...*

::: columns
::: column
![ribbon glyph](figures/glyph-ribbon.png)
:::

::: column
![segment glyph](figures/glyph-segment.png)
:::
:::

## The team {.center}

::: portrait
![](https://dicook.github.io/dicook-quarto/dicook-2023.png) Dianne Cook
:::

::: portrait
![](https://www.patriciamenendez.com/img/pmg.jpg) Patricia Menéndez
:::

::: portrait
![](https://uschilaa.github.io/profile.jpg) Ursula Laa
:::

::: portrait
![](https://staff.uic.edu.cn/attachment/images/2022/02/22/image_1645506624_ZXRS6xWr.jpeg)
Nicolas Langrené
:::

## `r emo::ji("link")` {.smaller background-image="figures/qrcode.svg" background-size="15%" background-position="top right"}

```{r echo = FALSE, eval = FALSE}
library(qrcode)
a <- qr_code("https://sherryzhang-chamber2024.netlify.app/")
generate_svg(a, filename = "figures/qrcode.svg")
```

-   this slide:
    -   {{< fa link >}}: <https://sherryzhang-chamber2024.netlify.app>\
    -   {{< fa brands github >}}:
        <https://github.com/huizezhang-sherry/chamber2024>
-   the `cubble` package:
    -   {{< fa brands github >}}:
        <https://huizezhang-sherry.github.io/cubble/>
    -   CRAN:
        <https://cran.r-project.org/web/packages/cubble/index.html>
-   papers:
    -   Zhang, H. S., Cook, D., Laa, U., Langrené, N., & Menéndez, P.
        (2024). cubble: An R package for organizing and wrangling
        multivariate spatio-temporal data. Accepted by the Journal of
        Statistical Software: <https://arxiv.org/abs/2205.00259>

    <!-- -   Wickham, H., Hofmann, H., Wickham, C., & Cook, D. (2012). -->
    <!--     Glyph‐maps for visually exploring temporal patterns in climate -->
    <!--     data and models. Environmetrics, 23(5), 382-393: -->
    <!--     <https://vita.had.co.nz/papers/glyph-maps.pdf> -->

```{r eval = FALSE}
# script for diagram
library(tidyverse)
library(patchwork)
nsw <- ozmaps::abs_ste %>% filter(NAME %in% c("New South Wales")) %>% rmapshaper::ms_simplify()

single <- climate_aus %>% filter(id == "ASN00076031")
glyph_dt <- single %>% face_temporal() %>% unfold(long, lat) %>% mutate(tmax = ifelse(is.na(tmax), lead(tmax, 2), tmax))
p1 <- ggplot() +
  geom_sf(data = nsw,fill = "transparent", linetype = "dotted")+
  geom_point(data = single, aes(x = long, y = lat)) +
  theme_bw() +
  coord_sf(xlim = c(141, 143), ylim = c(-35, -33.5)) +
  scale_x_continuous(breaks = seq(140, 143, 1)) +
  scale_y_continuous(breaks = seq(-35, -33, 1)) +
  ggtitle("(1)")

p2 <- single %>%
  face_temporal() %>%
  ggplot(aes(x = date, y = tmax)) +
  geom_line(alpha = 0.8) +
  theme_bw() +
  theme() +
  ggtitle("(2)")

glyph <- glyph_dt %>%
  ggplot(aes(x_major = long, x_minor = as.numeric(date),
             y_major = lat, y_minor = tmax)) +
  geom_glyph(width = 1, height = 0.3)

p3 <- layer_data(glyph) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line(alpha = 0.8) +
  theme_bw() +
  theme(axis.line = element_line(color = "#840032"),
        axis.text = element_text(color = "#840032", size = 10),
  ) +
  ggtitle("(3)") + xlab("long") + ylab("lat")

p4 <- glyph_dt %>%
  ggplot(aes(x_major = long, x_minor = as.numeric(date),
             y_major = lat, y_minor = tmax)) +
  geom_sf(data = nsw, fill = "transparent", linetype = "dotted", inherit.aes = FALSE) +
  geom_glyph(width = 1, height = 0.3, alpha = 0.8) +
  theme_bw() +
  coord_sf(xlim = c(141, 143), ylim = c(-35, -33.5)) +
  scale_x_continuous(breaks = seq(140, 143, 1)) +
  scale_y_continuous(breaks = seq(-35, -33, 1)) +
  ggtitle("(4)") + xlab("long") + ylab("lat")

g2 <- (p1 | p2) / (p4 | p3) + plot_layout(guides='collect') &
  theme(legend.position='none')

ggsave(g2, filename = here::here("figures/glyph-steps.png"), height = 4)
```
